[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

#############################################
# POETRY CONFIGURATION
[tool.poetry]
name = "myelectricaldata-import"
version = "0.13.0-rc.4"
description = "MyElectricalData official client"
authors = ["Cl√©ment VALENTIN <m4dm4rtig4n@gmail.com>"]
readme = "README.md"
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = "3.12.2"
paho-mqtt = "^1.6.1"
python-dateutil = "^2.8.2"
requests = "^2.31.0"
Markdown = "^3.5.2"
influxdb-client = "^1.39.0"
PyYAML = "^6.0.1"
mergedeep = "^1.3.4"
Jinja2 = "^3.1.3"
art = "^6.1"
alembic = "^1.13.1"
waitress = "^2.1.2"
rauth = "^0.7.3"
psycopg2-binary = "^2.9.9"
pymysql = "^1.1.0"
fastapi = "^0.109.0"
uvicorn = "^0.25.0"
python-multipart = "^0.0.6"
pypdf = "^3.17.4"
asyncio = "^3.4.3"
aiohttp = "^3.9.1"
websocket-client = "^1.7.0"
sqlalchemy = "^1.0.0"
fastapi-utils = "^0.2.1"
pytz = "^2023.3.post1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
black = "^23.12.1"
flake8 = "^7.0.0"
flake8-pyproject = "^1.2.3"
inquirerpy = "^0.3.4"
tox = "^4.12.1"
pyflakes = "^3.2.0"
flake8-bugbear = "^24.1.17"
flake8-colors = "^0.1.9"
flake8-docstrings = "^1.7.0"
flake8-import-order = "^0.18.2"
flake8-typing-imports = "^1.15.0"
pep8-naming = "^0.13.3"
coverage = "^7.4.0"
pre-commit = "^3.6.0"
mock = "^5.1.0"
pylint = "^3.1.0"
tox-docker = "^4.1.0"
vulture = "^2.11"
ruff = "^0.2.2"
isort = "^5.13.2"
conventional-pre-commit = "^3.1.0"
pytest-dotenv = "^0.5.2"

#############################################
# SEMESTIC RELEASE CONFIGURATION
taskipy = "^1.12.2"
pylint-flask-sqlalchemy = "^0.2.0"
pylint-sqlalchemy = "^0.3.0"
watchgod = "^0.8.2"
[tool.semantic_release]
assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"
build_command = "echo 1"
version_toml = [
    "pyproject.toml:tool.poetry.version",
]

commit_version_number = true
version_variables = [
    "src/__version__.py:VERSION",
]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
# prerelease = true

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

#############################################
# PYTEST CONFIGURATION
[tool.pytest.ini_options]
norecursedirs = ".git .tox *.egg* old docs dist build data"
log_cli_level = "DEBUG"
addopts = "-rw"
pythonpath = [
    "src"
]
testpaths = [
    "tests",
]
env_override_existing_values = 1
env_files = [
    "env.example"
]

#############################################
# ISORT CONFIGURATION
[tool.isort]
profile = "black"
paths = ["src", "tests"]
line_length = 119

#############################################
# BLACK CONFIGURATION
[tool.black]
extend-exclude = ".venv"
line-length = 119

#############################################
# RUFF CONFIGURATION
[tool.ruff]
src = ["src","tests"]
line-length = 119
select = [
  "E",
  "F",
  "B",
  "W",
  "N",
  "C90",
  "I",
  "D",
  #"UP",  Temp deactivate
  "YTT",
  "S",
  "A",
  "COM",
  "C4",
  "DTZ",
  "G",
  "PTH",
  "ERA",
  "PLE",
  "PLR",
  "PLW",
  "RSE",
  "SLF",
  "RUF",
]

# D107: Missing docstring in __init__
# D203: 1 blank line required before class docstring
# D211: No blank lines allowed before class docstring
# D213: Multi-line docstring summary should start at the second line
# B008: Do not perform function call {name} in argument defaults
# G004: Logging statement uses f-string
# COM812: Trailing comma missing

ignore = ["D107", "D203", "D211", "D213", "B008", "G004", "COM812"]

[tool.ruff.per-file-ignores]
"*/tests/*" = ["S101"]
"tests/*" = ["S101"]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.isort]
known-first-party = ["damstring"]

#############################################
# VULTURE CONFIGURATION
[tool.vulture]
exclude = [".venv/"]
paths = ["src", "tests"]
ignore_decorators = ["@app.command"]

#############################################
# TASKIPY CONFIGURATION
[tool.taskipy.tasks]
tests = { cmd = "pytest --cov src --cov-report=xml --cov-report=term-missing --cov-branch", help = "Launch unit tests" }
black = { cmd = "black --check .", help = "Check if code is properly formatted with black" }
black-style = { cmd = "black .", help = "Check if code is properly formatted with black" }
ruff = { cmd = "ruff check .", help = "Launch ruff" }
ruff-fix = { cmd = "ruff check --fix-only .", help = "Launch ruff" }
style = { cmd = "task black-style && task ruff-fix", help = "Enforce style with black and ruff" }
flake8 = { cmd = "flake8 .", help = "Launch flak8" }
pylint = { cmd = "pylint --recursive=y .", help = "Lauch pytlint" }
vulture = { cmd = "vulture", help = "Launch vulture" }
lint = { cmd = "task black && task ruff && task flake8 && task pylint && task vulture", help = "Launch all linters" }
